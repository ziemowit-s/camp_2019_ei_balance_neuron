load_file("nrngui.hoc")

tstop = 400
steps_per_ms = 40
dt = 0.0025


create soma
create dend
soma {
    L=20
    diam=30
    Ra = 123.0
    insert pas
}

dend {
    L=400
    diam=2
    Ra = 123.0
    nseg=10
    insert pas
}
connect dend(0), soma(1)

ne = 8
ni = 2

exc_step = (nseg/ne)/nseg
inh_step = (nseg/ni)/nseg
weight = 0.5

objref ncl, synl, stiml
objref stim, syn, rand
objref g[20]

ncl = new List()
stiml = new List()
rand = new Random()
rand.uniform(0, 1)

proc setup_exc_syn() {
    lc = 0
    for i=0, ne-1 {
        lc_temp = lc + exc_step/2
        print(lc_temp)
        lc += exc_step

        syn = new Exp2Syn(lc_temp)
        syn.tau1 = 0.5	// Spruston JPhysiol 1995
        syn.tau2 = 3	// Spruston JPhysiol 1995
        syn.e = 0

        stim = new BurstStim2()
        stim.number = 1
        stim.start = 50
        stim.interval = 10
        stim.noise = 0
        stim.burstint = 50	// interburst interval (ms)
        stim.burstlen = 1000	// burst length (ms)

        // NetCon(source_ref, target, threshold, delay, weight)
        ncl.append(new NetCon(stim, syn, 0, 0, weight))
    }
}

proc setup_inh_syns() {
    lc = 0
    for i=0, ni-1 {
        lc_temp = lc + inh_step/2
        lc += inh_step
        syn = new Exp2Syn(lc_temp)

        syn.tau1 = 0.5	// Spruston JPhysiol 1995
        syn.tau2 = 3	// Spruston JPhysiol 1995
        syn.e = 0

        stim = new BurstStim2()
        stim.number = 1
        stim.start = 50
        stim.interval = 10
        stim.noise = 0
        stim.burstint = 50	// interburst interval (ms)
        stim.burstlen = 1000	// burst length (ms)

        // NetCon(source_ref, target, threshold, delay, weight)
        ncl.append(new NetCon(stim, syn, 0, 0, -weight))
    }
}

nrnmainmenu()         // create main menu
nrncontrolmenu()      // create control menu
setup_exc_syn()

proc addgraph() { local ii  // define subroutine to add a new graph
                // addgraph("variable", minvalue, maxvalue)
    ngraph = ngraph+1
    ii = ngraph-1
    g[ii] = new Graph()
    g[ii].size(0,tstop,$2,$3)
    g[ii].xaxis()
    g[ii].yaxis()
    g[ii].addvar($s1,1,0)
    g[ii].save_name("graphList[0].")
    graphList[0].append(g[ii])
}

addgraph("soma.v(0.5)",-80,50)
addgraph("dend.v(0.1)",-80,50)
addgraph("dend.v(0.5)",-80,50)
addgraph("dend.v(1.0)",-80,50)

param_weight = weight
proc update_weight() {
	weight = param_weight
	setup_exc_syn()
}


xpanel("Parameters")
xvalue("Synaptic Weight","param_weight",1,"update_weight()",1,1)
xpanel()








